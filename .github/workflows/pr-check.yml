name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8.15.6"

jobs:
  # Changed files detection
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      api: ${{ steps.changes.outputs.api }}
      packages: ${{ steps.changes.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
            api:
              - 'apps/api/**'
            packages:
              - 'packages/**'
            root:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'

  # Quality gates that MUST pass for PR approval
  pr-quality-gates:
    name: PR Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üö´ BLOCKING - Lint check
        run: pnpm lint

      - name: üö´ BLOCKING - Type check
        run: pnpm typecheck

      - name: üö´ BLOCKING - Run tests
        run: pnpm test --passWithNoTests

      - name: üö´ BLOCKING - Format check
        run: pnpm format --check

      - name: Check commit messages
        if: github.event_name == 'pull_request'
        run: |
          # Get commit messages in this PR
          git log --format=%s origin/${{ github.base_ref }}..HEAD | while read msg; do
            echo "Checking commit: $msg"
            if ! echo "$msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}'; then
              echo "‚ùå Invalid commit message: $msg"
              echo "Format should be: type(scope): description"
              exit 1
            fi
          done

  # Web-specific checks
  web-quality:
    name: Web Quality Checks
    runs-on: ubuntu-latest
    needs: [changes, pr-quality-gates]
    if: needs.changes.outputs.web == 'true'
    defaults:
      run:
        working-directory: ./apps/web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./

      - name: Build web app
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: "http://localhost:3001"
          NEXT_PUBLIC_APP_URL: "http://localhost:3000"

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sh .next | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # Add bundle size check logic here if needed

  # API-specific checks
  api-quality:
    name: API Quality Checks
    runs-on: ubuntu-latest
    needs: [changes, pr-quality-gates]
    if: needs.changes.outputs.api == 'true'
    defaults:
      run:
        working-directory: ./apps/api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Build API
        run: pnpm build

      - name: Run API tests
        run: pnpm test --passWithNoTests

  # Security and vulnerability checks
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: pr-quality-gates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # PR status check - this job status determines if PR can be merged
  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [pr-quality-gates, web-quality, api-quality, security-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.pr-quality-gates.result }}" != "success" ]]; then
            echo "‚ùå Quality gates failed - PR cannot be merged"
            exit 1
          fi

          if [[ "${{ needs.web-quality.result }}" == "failure" ]]; then
            echo "‚ùå Web quality checks failed - PR cannot be merged"
            exit 1
          fi

          if [[ "${{ needs.api-quality.result }}" == "failure" ]]; then
            echo "‚ùå API quality checks failed - PR cannot be merged"
            exit 1
          fi

          if [[ "${{ needs.security-check.result }}" == "failure" ]]; then
            echo "‚ùå Security checks failed - PR cannot be merged"
            exit 1
          fi

          echo "‚úÖ All checks passed - PR ready for merge"
